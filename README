this is a tiny php framework




/*
 *	教程应该包含:
 *
 *		1.  	一个博客网站
 *		2.	一个电商网站
 *		3.	一个后台服务群
 *		4.	一个游戏 Open API
 *
 */


======================================= 纲要 ============================================

本框架只提供简单实在的服务，而不是做任何概念性的限制（例如什么 Model, View, Controler 之类的）

本框架提供的服务有: 1. 监控请求;   2. 文档管理;	 3.通用模块 和 小工具
访问监控能够让你方便地查看从 请求参数 到 DB操作时长 各个节点的信息 --- 只要你把一个任务放进来，我就会给你反馈最直接的相关信息
文档管理则能够让你轻松地 查找 和 同步 每一段代码的注释, 以及每个class 和 每个 method 的定义
通用模块 和 小工具 能够让你迅速搭建起所需要的web服务，快捷地实现二次开发(例如：登录验证，二维码，上传文件，增删查改 。。。)




***************************** 1. 监控请求 *************************************
1） 可以在 控制台 或 浏览器 直观地查看监控结果
2） 监控类型分为:  执行时间, 内存消耗, 执行次数
3） 监控频率分为： 按次数比  1/10,  按时间比  1/10min (执行次数没有频率概念)
4） 统计周期： 最小粒度为 1min
5) *监控发送出去的邮件, 并以邮件/短信的方式通知运营者


***************************** 2. 文档管理 *************************************
1） 可以在 控制台 或 浏览器 查看文档
2） 能够 模糊匹配/精确匹配 找到所有 
	a)  类 的 所有成员和方法
	b)  函数 的 定义
3） 能够 找到符合格式的 类说明注释 和 函数说明注释
4） 可以手动同步, 当然，也可以在 crontab 里调用app的小工具进行同步


***************************** 3. 通用模块和小工具  *************************************
1） 调用时，你会品味到什么是"简练优雅"


=========================================================================================



=======================================  目录结构  ============================================
------	app	---------------------------- 框架根目录 
	|
	|
	core	---------------------------- 核心类 目录, 该目录中的类不能随意修改，否则会影响整个框架的稳定性
	|	|
	|	|-----	consts.php	常量定义 ： 所有常量定义 只关于 core 目录内
	|	|
	|	|-----	app.php	        框架基类 ： app入口
	|	|
	|	|-----	monotor.php	监控     ： 监控入口
	|	|
	|	|-----	doc.php	        文档类   ： 文档入口
	|	|
	|	|-----	test.php	测试类   ： 测试入口
	|	|
	|	|-----	lib		核心工具类目录, 该目录下的类文件不会依赖任何其他文件（php扩展除外）
	|	|	|
	|	|	|----- ShmArr.php	基于共享内存的 key=>value 数组	(依赖于 shm 扩展)
	|	|	|
	|	|	|----- MmapStream.php	基于mmap的stream	 	(依赖于 mmap 扩展)
	|	|	|
	|	|	|----- Post.php         post 对象
	|	|	|
	|	|	|----- Get.php     	get 对象
	|	|	|
	|	|	|----- Route.php     	路由对象
	|	|	|
	|	|	|----- Csv.php     	路由对象
	|	|	|
	|	|	|----- SimpleRedis.php     	redis对象	(依赖于 redis 扩展)	
	|	|	|
	|	|	|----- SimpleMemcached.php     	memcached对象	(依赖于 memcached 扩展)	
	|	|	|
	|	|	|---- sql
	|	|	|	|----- MysqlPdo.php	mysqlpdo类	(依赖于 mysql_pdo 扩展)
	|	|	|	|
	|	|	|	|----- Mysqli.php	mysqli类	(依赖于 mysqli 扩展)
	|	|	|	|
	|	|	|	|----- Postsql.php	postsql类	(依赖于 postsql 扩展)
	|	|	|	
	|	|	|---- test/	测试目录
	|	|
	|	|
	|	|-----	modules         常用模块目录， 该目录下的模块类是基于 core/lib 创建起来的
	|	|	|
	|	|	|----- http                 http 相关工具
	|	|	|	|
	|	|	|	|----- HttpPost.php     http post 对象
	|	|	|	|
	|	|	|	|----- HttpGet.php     	http get 对象
	|	|	|	|
	|	|	|	|----- HttpRoute.php    http 路由对象
	|	|	|	|
	|	|	|	|----- Http.php    	http 对象, 集 post, get, route ,cookie, session 等一身，方便使用
	|	|	|	
	|	|	|---- test/	测试目录
	|	|	
	|	|	
	|	|-----	test		测试目录， 原则上，core目录内 每添加一个 文件，都应该在其根目录下创建一个test文件夹，并写
	|	|	|		好充分的测试用例，然后执行 Test.php 入口文件，以便确保项目执行OK。
	|	|	|
	|	|	|-----	TestApp.php	        测试 app入口
	|	|
	|	|	|-----	TestMonotor.php		监控     ： 监控入口
	|	|	|
	|	|	|-----	TestDoc.php	        文档类   ： 文档入口
	|
	|
	|
	myapp	---------------------------- 用户自定义项目 "app" 的文件, 可以参考 core 目录
		|
		|
		|
		|-----	consts.php	myapp 项目的 常量定义
		|
		|-----	app.php		myapp web API 入口
		|			* 入口文件：基于 core/ 构建而成, 通常应该是个 可执行脚本，而不是 class 文件
		|
		|-----	monitor.php	myapp 监控入口
		|
		|-----	doc.php	        myapp 文档入口
		|	
		|-----	test.php	myapp 测试入口
		|	
		|-----	modules/        myapp的模块目录
		|	|
		|	|-----	test/	modules/的测试目录
		|	
		|	
		|-----	lib/		myapp的库目录
		|	|
		|	|-----	test/	modules/的测试目录
		|
		|-----	test/		测试目录




======================================= 使用示例  ============================================
********************************* 0. 路由 ************************************
在 web API 入口设置路由规则：
app/app.php
<?php
	require "../core/App.php";
	
	//所有操作都基于：  path + method 
	//规则优先级如下：  only = allow = deny, 以最后一个设置为准生效
	
	// path前缀 对应的 namespace 
	//默认会设置 / 为 \app\modules\
	app()->router("/")->mapto("\app\modules\");
	app()->router("/user/")->mapto("\app\modules\userv2\");
	
	//默认全部模块都可以路由到
	app()->router("*")->allow();		//等价于  allow("*", "*");	allow($path, $method);
	app()->router("/user/Delete")->deny();	//假设该模块只在内部调用，或者控制台使用
	
	//默认全部模块都不能路由到
	app()->router("*")->deny();
	app()->router("/user/*")->allow();	//假设需要开放模块 "/user/*"
	
	//method 维度的规则
	app()->router("/user/Login")->only("post");
	
	//用户自定义的module回调 require: 在执行本mod之前，需要成功执行自定义回调函数 func
	app()->router("/show/DataImportant")->require(function(){
		return app()->mod("\user\Permission")->run() < 3;	//查看用户权限是否足够
	});
	
	//用户自定义的module回调 after: 在执行本mod之后，需要成功执行自定义回调函数 func
	app()->header("Content-Format:json")->after(function($params) {
		return json_encode($params);
	});
	
		
	"/admin/articles/list/12/json" > "role=admin", "/articles/list?page=12", "format=json" >  "/user/permission('admin')", "/articles/list(12)", "/format($context)"
	
	app()->route("format=json", QUERY)->to("\format($CTX)");				//$CTX 关键字， 上下文内容
	app()->route("/articles/list", PATH)->to("\articles\list($page)");		//$_RQEUEST['page']
	app()->route("role=admin", QUERY)->to("\user\permission($SRV_PATH)");	//$SRV_xx关键字， 即 $_SERVER[xx]
	
	// 将 路径 映射成 (路径 + 参数) 的规则
	app()->rule("/admin/*")->to(null, array('role'=>'$1'));	//$1 表示第一个路径目录， 依次类推， $2表示第二个, $3表示第三个....., $F 表示第一个， $L 表示最后一个
	app()->rule("*/json")->to(null, array('format'=>'$L'));
	
	$req = app()->fetch_request("/admin/articles/list/12/json");  
	/* 获取请求参数应当返回 (路径，参数)：  
	[	
		(null, "role=admin"),
		("/articles/list/12", {"page":12}),
		(null, "format=json")
	]
	*/
	
	app()->fetch_modules($req);
	/* 获取对应的模块执行序
	[
		("\user\permission", [$SERVER['PATH_INFO']]),	//来自$SRV_PATH
		("\articles\list", [12]),	//来自上$_RQEUEST
		("\format", [$CTX])			//来自上一个mod的输出
	]
	
	
	
	"/admin/articles/list/12/json" > "role=admin", "/articles/list?page=12", "format=json" >  "/user/permission('admin')", "/articles/list(12)", "/format($context)"
	app()->route("/(json|xml|html)")->to("\format($CTX, $1)");				//$CTX 关键字， 上下文内容
	//app()->route("/articles/list")->to("\articles\list($page)");		//$_RQEUEST['page']
	app()->route("/articles/*")->allow();								//$_RQEUEST['page']
	app()->route("/(admin|vip|visitor)")->to("\user\permission($SRV_PATH)");	//$SRV_xx关键字， 即 $_SERVER[xx]
	
	vip 搜索报表A 2015-11 和 2015-12 的数据， 并按照ID进行排序,以json格式返回：
	app()->route("/vip")->to("\user\permission($SRV_PATH)");	//$SRV_xx关键字， 即 $_SERVER[xx] = "/vip/articles/search"
	app()->route("/articles/_");	//$_REQUEST['search'] = 'A', $_REQUEST['begin'] = '2015-11', $_REQUEST['end'] = '2015-12'
	app()->route("/sort/_")->to("\data\sort($1, $CTX)");	//
	app()->route("/json")->to("\format($1, $CTX)");
	
	/vip/articles/search/sort/desc/json
	执行顺序：
	/vip, /articles/search, /sort/desc, /json 


********************************* 1. 监控请求 (监控request请求次数) ************************************
在 web API 入口设置监控：
app/app.php
<?php
	require "../core/App.php";
	require "../core/Monitor.php";
	
	//监控 GET /user/login 请求的次数
	$func = monitor()->watch(
		"turnel0",				//监控频道
		array(app()->web, "response"),  	//需要监控的函数
		function(){				//触发条件 回调函数
			return app()->web->path() == "/user/login" && app()->web->method() == "GET"
		});
	app()->replace("web", "response", $func);		//替换原先的 app()->web->response() 函数
	app()->web->response();
?>

在 Monitor 入口查看监控数据:
app/monitor.php
<?php
	require "../core/Monitor.php";
	monitor()->report("turnel0");
?>



********************************* 2. 监控DB (监控 pdo 的 query 时长) ************************************
在 web API 入口设置监控：
app/app.php
<?php
	require "../core/App.php";
	require "../core/Monitor.php";
	
	//监控 mysql 的 query 请求耗时 & 参数
	$func = monitor()->watch(
		"turnel0",				//监控频道
		array(app()->db0, "query"), 		//需要监控的函数
		null,					//触发条件 回调函数
		APP_MON_RESULT_DURATION | APP_MON_RESULT_PARAMS	//监控内容 (执行时间 & 请求参数)
		array(APP_MON_FREQUENCY_TIME => 15)	//监控方式（每隔 15 s 监控一次）
		);
	app()->replace("db", "query", $func);		//替换原先的 app()->db->query() 函数
	app()->db->query("SELECT * FROM user_info");
?>

在 Monitor 入口查看监控数据:
app/monitor.php
<?php
	require "../core/Monitor.php";
	monitor()->report("turnel10");
?>



********************************* 3. 测试用例 ************************************
//编写测试用例： 用户登录-- 正常登录，用户名不存在，密码错误
app/modules/user/TestLogin.php
<?php
namespace	\app\modules\user;
class	TestLogin
{
	public function mycase1()
	{
		app()->db->delete("delete from user_info");
		app()->db->insert("insert into user_info (`name`,`pwd`,`status`) values ('awen','123',0);");
		
		/********  模拟执行 web 请求  **********/
		$res = app()->web->get("/user/login?name=awen&pwd=123");		
		app()->assert($res['status'] == 0, "wrong status returned [0]");	//登录应该是成功的
		
		$res = app()->web->get("/user/login?name=awen2&pwd=123");		// app()->app 对象是 app/ 项目的封装
		app()->assert($res['status'] == 1, "wrong status returned [0]");	//登录应该报用户名不存在
		$res = app()->web->get("/user/login?name=awen&pwd=123456");			// app()->app 对象是 app/ 项目的封装
		app()->assert($res['status'] == 2, "wrong status returned [0]");	//登录应该报密码错误
	}
}

app/test.php
<?php
require "../core/Test.php";
test()->run("\app\modules\user\TestLogin");	//根据 `类名`, 自动执行 TestLogin 的所有用例
test()->namespace("/project/path", "\app");
test()->auto("/project/path/modules/user");	//根据 `目录路径`, 自动搜索所有用例类并执行 



********************************* 4. 自动文档 ************************************
<?php
// 写规范化的文档：
app/module/user/Login.php
<?
namespace \app\module\user;

class	Login
{
	//@desc		函数描述
	//@param	$user,  用户名
	//@param	$pwd,   用户密码
	//@return	成功返回 0, 失败返回错误代码
	//@example	内容
	public function run($user, $pwd)
	{
	}
}

// 获取文档
app/doc.php
<?php
require "../core/doc.php";

doc()->search_namespace("\namespace\path");
doc()->search_dir("/dir/path");
doc()->search_class("\class\path");
doc()->search_file("/file/path");

/*** 通用版本 ****/
doc()->namespace("/project/path/app", "\app");
doc()->search("\app\module\user");  					//根据命名空间，查找对应目录下的所有类和method
doc()->search("\app\module\user\Login");				//根据类名查找该类的所有函数
doc()->search("/project/path/app/module/user/Login.php", "%run%");	//根据文件名查找该类的 函数名 包含有 "run" 的说明文档

	/* 将返回: [
	*			函数名	=>	[ 声明， 注释， 例子]
	*			类名 => [
	*				public 方法名 => [ 声明,  注释,  例子]
	*				....
	*			]
	*			....
	*
	*		]
	*
	*
	*/


********************************* 5. 使用一个搜索面板 (包含 排序，多条件查询) ************************************
<?php
	...
	app()->namespace("/project/path", "\app");
	app()->mod->run("/app/module/sort", array(
			"db"	=> app()->pdo,
			"table" => "user",
			"list"	=> array(
				"id" => 1,
				"ctime" => function($time) {
					return date("Y-m-d H:i:s", $time);
				},
				"name" => 1,
				"sex" => 1,
				"age" => 1,
			),
			"sort" => array("id"=>"desc", "ctime"=>"asc"),
			"condition" => array(
				"age" => "<=10",
				"name" => "%awen%",
			)
	);

	/*
	* 返回:
	*	[
	*		"data":	数据
	*		"sort": ["id" => "desc", "ctime" => "asc" ],
	*		"condition": ["age" => "<=10", "name" => "%awen%"]
	*   ]
	*
	*/

********************************* 5. 使用一个验证码生成器 ************************************
<?php
	app()->namespace("/project/path", "\app");
	调用方式1：	格式固定，不用处理异常
	app()->mod->run("\app\module\corderbar", array(
			"target_dir"	=>	"/path/to/dir/"	//放置验证码图片的目录
	));
	/* 返回
	*	{
	*		"status" => 0,		//状态码
	*		"data" => {		//数据
	*			"code" 	=> "ab123",
	*			"img"	=> "aff03aeas.file",	//随机文件名
	*		}
	*	}
	*
	*/
	
	调用方式2：	更直接，需要自己处理异常
	try {
		$mod = app()->mod("\app\module\corderbar");
		$res = $mod->run( array(
				"target_dir"	=>	"/path/to/dir/"	//放置验证码图片的目录
		))
	} catch (Exception $e) {
		$err = $e->getMessage();
	}
	/* 返回
	*	{	
	*		"code" 	=> "ab123",
	*		"img"	=> "aff03aeas.file",	//随机文件名
	*	}
	*/

********************************* 6. 使用一个基于共享内存的 cache ************************************
<?php
	...
	app()->load("shm", new \app\tools\Shm());
	app()->shm->set("name", array(213));
	app()->shm->set("id", 123);
	...
	app()->shm->get("name");
	app()->shm->get("id");
=========================================================================================
