this is a tiny php framework




/*
 *	教程应该包含:
 *
 *		1.  	一个博客网站
 *		2.	一个电商网站
 *		3.	一个后台服务群
 *		4.	一个游戏 Open API
 *
 */


======================================= 纲要 ============================================

本框架只提供简单实在的服务，而不是做任何概念性的限制（例如什么 Model, View, Controler 之类的）

本框架提供的服务有: 1. 监控请求;   2. 文档管理;	 3.通用模块 和 小工具
访问监控能够让你方便地查看从 请求参数 到 DB操作时长 各个节点的信息 --- 只要你把一个任务放进来，我就会给你反馈最直接的相关信息
文档管理则能够让你轻松地 查找 和 同步 每一段代码的注释, 以及每个class 和 每个 method 的定义
通用模块 和 小工具 能够让你迅速搭建起所需要的web服务，快捷地实现二次开发(例如：登录验证，二维码，上传文件，增删查改 。。。)




***************************** 1. 监控请求 *************************************
1） 可以在 控制台 或 浏览器 直观地查看监控结果
2） 监控类型分为:  执行时间, 内存消耗, 执行次数
3） 监控频率分为： 按次数比  1/10,  按时间比  1/10min (执行次数没有频率概念)
4） 统计周期： 最小粒度为 1min
5) *监控发送出去的邮件, 并以邮件/短信的方式通知运营者


***************************** 2. 文档管理 *************************************
1） 可以在 控制台 或 浏览器 查看文档
2） 能够 模糊匹配/精确匹配 找到所有 
	a)  类 的 所有成员和方法
	b)  函数 的 定义
3） 能够 找到符合格式的 类说明注释 和 函数说明注释
4） 可以手动同步, 当然，也可以在 crontab 里调用app的小工具进行同步


***************************** 3. 通用模块和小工具  *************************************
1） 调用时，你会品味到什么是"简练优雅"


=========================================================================================



=======================================  目录结构  ============================================
------	app	---------------------------- 框架根目录 
	|
	|
	core	---------------------------- 核心类 目录, 该目录中的类不能随意修改，否则会影响整个框架的稳定性
	|	|
	|	|-----	consts.php	常量定义
	|	|
	|	|-----	app.class.php	框架基类
	|	|
	|	|-----	monitor.class.php	监控
	|	|
	|	|-----	doc.class.php	文档类
	|	|
	|	|-----	tools		核心工具类目录
	|		|
	|		|----- shm.class.php		共享内存类	(依赖于 shm 扩展)
	|		|
	|		|----- mmap.class.php		内存映射文件 	(依赖于 mmap 扩展)
	|		
	|		
	admin	---------------------------- 管理后台 目录, 用来访问监控数据 和 代码文档的web入口
	|
	|
	modules	---------------------------- 常用建站模块 目录, 用户可以自主添加一些自认为常用的模块
	|
	|
	tools	---------------------------- 常用小工具 目录, 用户可以自主添加一些自认为常用的小工具
		|
		|
		|
		|---- queue	队列存储
		|	|
		|	|----- redis.class.php		redis类		(依赖于 redis 扩展)
		|	|
		|	|----- memcached.class.php	memcached类	(依赖于 memcached 扩展)
		|
		|
		|---- hash	key-value 存储
		|	|
		|	|----- redis.class.php		redis类		(依赖于 redis 扩展)
		|	|
		|	|----- memcached.class.php	memcached类	(依赖于 memcached 扩展)
		|	
		|
		|---- sql
		|	|----- mysqlpdo.class.php	mysqlpdo类	(依赖于 mysql_pdo 扩展)
		|	|
		|	|----- mysqli.class.php		mysqli类	(依赖于 mysqli 扩展)
		|	|
		|	|----- postsql.class.php	postsql类	(依赖于 postsql 扩展)
		|	|
		...	...




======================================= 使用示例  ============================================


********************************* 1. 监控请求 (监控request请求次数) ************************************
假设你的request 入口函数是  $app->run(), 像这样:
<?php
	....
	index_run();
?>

监控时，设置另一个函数 "myindex" 作为 index_run() 的别名, 并执行:
<?php
	...
	require "{$APP_ROOT}/app.php";
	app()->monitor("myindex_run", index_run(), $index, APP_MON_TYPE_COUNT);
	app()->myindex_run();
?>



********************************* 2. 监控DB (监控 pdo 的 query 时长) ************************************
<?php
	...

	/* 通过参数 array("pdo", "query"),  指定监控的method名是 "query"
	*  通过参数 APP_MON_TYPE_DURATION 指定监控内容为"执行时间"
	*  通过参数 APP_MON_TYPE_FREQUENCY_TIME, 指定采集频率方式为"按时间间隔"
	*  通过参数 15m 指定采集频率为 "采集间隔为 15min" ( 这通常意味着 query 函数被非常频繁地调用，以至于设置 1/1000这类的按比例采样已经不适合)
	*		可用频率单位: m为分钟， s为秒,  h为小时
	*/

	app()->monitor(array("pdo", "query"), $pdo, APP_MON_TYPE_DURATION, APP_MON_FREQUENCY_TIME, "15m");
	app()->pdo->query();
?>



********************************* 3. 监控DB (同时监控 pdo.query 的时长 和 内存) ************************************
<?php
	...
	/*
	* 	每 15min 采集一次时长信息
	*   每 30 次访问后 采集一次内存信息
	*/
	app()->monitor(array("pdo", "query"), $pdo, APP_MON_TYPE_DURATION, APP_MON_FREQUENCY_TIME, "15m");
	app()->monitor(array("pdo", "query"), $pdo, APP_MON_TYPE_MEMORY, APP_MON_FREQUENCY_COUNT, 30);
	app()->pdo->query();



********************************* 4. 获取一个目录下的所有文档信息 ************************************
<?php
	...
	//获取全部
	app()->doc("/path/of/code");
	//模糊搜索
	app()->doc("/path/of/code", "%name%");
	//精确搜索
	app()->doc("/path/of/code", "name");

	// 全库索引暂不考虑 

	/* 将返回: [
	*			函数名	=>	[ 声明， 注释， 例子]
	*			类名 => [
	*				public 方法名 => [ 声明,  注释,  例子]
	*				....
	*			]
	*			....
	*
	*		]
	*
	*
	*/


********************************* 5. 使用一个搜索面板 (包含 排序，多条件查询) ************************************
<?php
	...
	app()->call("/app/module/sort", array(
			"db"	=> app()->pdo,
			"table" => "user",
			"list"	=> array(
				"id" => 1,
				"ctime" => function($time) {
					return date("Y-m-d H:i:s", $time);
				},
				"name" => 1,
				"sex" => 1,
				"age" => 1,
			),
			"sort" => array("id"=>"desc", "ctime"=>"asc"),
			"condition" => array(
				"age" => "<=10",
				"name" => "%awen%",
			)
	);

	/*
	* 返回:
	*	[
	*		"data":	数据
	*		"sort": ["id" => "desc", "ctime" => "asc" ],
	*		"condition": ["age" => "<=10", "name" => "%awen%"]
	*   ]
	*
	*/

********************************* 5. 使用一个验证码生成器 ************************************
<?php
	...
	app()->call("/app/module/corderbar", array(
			"target_dir"	=>	"/path/to/dir/"	//放置验证码图片的目录
	));
	/* 返回
	*	[
	*		"code" 	=> "ab123",
	*		"img"	=> "aff03aeas.file",	//随机文件名
	*	]
	*
	*/

********************************* 6. 使用一个基于共享内存的 cache ************************************
<?php
	...
	app()->load("shm", new \app\tools\Shm());
	app()->shm->set("name", array(213));
	app()->shm->set("id", 123);
	...
	app()->shm->get("name");
	app()->shm->get("id");
=========================================================================================
